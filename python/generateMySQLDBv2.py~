#!/usr/bin/python
#To extract all github event from the JSON dumps and save it to the DB
from json import JSONDecoder
import sys,os
import MySQLdb as mdb
import gzip
import datetime
import time




#Get float time 
def getFloatTime(rawTime):
	try:
		timeStamp = datetime.datetime.strptime(rawTime[:rawTime.rfind('-')],'%Y-%m-%dT%H:%M:%S')
		t1 = timeStamp.timetuple()
		return time.mktime(t1)
	except Exception as e:
		timeStamp = datetime.datetime.strptime(rawTime[:rawTime.rfind(' ')],'%Y/%m/%d %H:%M:%S')
		t1 = timeStamp.timetuple()
		return time.mktime(t1)
		pass

		

def loads_invalid_obj_list(s):
	try:
		decoder = JSONDecoder()
		s_len = len(s)
		objs = []
		end = 0
		while end != s_len:
			obj, end = decoder.raw_decode(s, idx=end)
			objs.append(obj)
		etlMySQL(obj)
	except Exception as e:
		print 'Error in line:'+str(sys.exc_traceback.tb_lineno)
		print e	

def etlMySQL(obj):
	try:
		db = mdb.connect(host="localhost",user="root",passwd="root",db="github")
		cursor = db.cursor()
		user = obj['actor']
		timeStamp = obj['created_at']
		eventType = obj['type']
		repo_id = 0
		owner = ""
		repo_url=""
		repo_name = ""
		repo_language = ""
		watchers = 0
		stargazers = 0
		forks = 0
		try:
			repo_id = obj['repository']['id']
		except Exception as e:
			pass
		try:
			owner = obj['repository']['owner']
		except Exception as e:
			pass

		try:
			repo_url = obj['repository']['url']
		except Exception as e:
			pass

		try:
			repo_name = obj['repository']['name']
		except Exception as e:
			pass

		try:
			repo_language = obj['repository']['language']
		except Exception as e:
			pass
		
		try:
			watchers = obj['repository']['watchers']
		except Exception as e:
			pass
		try:
			stargazers = obj['repository']['stargazers']
		except Exception as e:
			pass
		try:
			forks = obj['repository']['forks']
		except Exception as e:
			pass
		sql = "INSERT INTO AllEventsv2 VALUES ('"+user+"','"+timeStamp+"','"+eventType+"','"+mdb.escape_string(repo_url)+"','"+repo_name+"','"+owner+"','"+repo_language+"',"+str(watchers)+","+str(forks)+","+str(stargazers)+","+str(getFloatTime(timeStamp))+")"
		print sql
		cursor.execute(sql)
		db.commit()		
	except Exception as e:
		print 'Error in line:'+str(sys.exc_traceback.tb_lineno)
		print e
		pass
	

path = str(sys.argv[1])
path = "/home/kira/GitHubTrends/2012data/"+path 
os.chdir(path)
for zippedFile in os.listdir("."):
	print zippedFile
	try:
		f = gzip.open(zippedFile, 'rb')
		file_content = f.read()
		loads_invalid_obj_list(file_content)
	except Exception as e:
		print 'Error in line:'+str(sys.exc_traceback.tb_lineno)
		print e
		pass
	finally:
		f.close()	

